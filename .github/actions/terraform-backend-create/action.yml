name: 'Create TFState Storage Action'
description: 'Creates and configures Azure Storage Account for Terraform state'

inputs:
  environment: { description: 'Environment name', required: true }
  subnet_ids: { description: 'Comma-separated list of subnet IDs', required: false, default: '' }
  run_resource_provider_check: { description: 'Run resource provider registration check', required: false, default: 'true' }
  run_resource_group_check: { description: 'Run resource group check', required: false, default: 'true' }
  run_storage_account_check: { description: 'Run storage account check', required: false, default: 'true' }
  run_network_rules_check: { description: 'Run network rules check', required: false, default: 'true' }
  run_blob_properties_check: { description: 'Run blob properties check', required: false, default: 'true' }
  run_container_properties_check: { description: 'Run container properties check', required: false, default: 'true' }
  run_backup_checks: { description: 'Run backup checks', required: false, default: 'true' }
  create_resource_group: { description: 'Create resource group', required: false, default: 'true' }
  create_storage_account: { description: 'Create storage account', required: false, default: 'true' }
  update_network_rules: { description: 'Update network rules', required: false, default: 'false' }
  create_container: { description: 'Create container', required: false, default: 'true' }
  update_blob_policies: { description: 'Update blob policies', required: false, default: 'true' }
  update_container_policies: { description: 'Update container policies', required: false, default: 'true' }
  setup_azure_backup: { description: 'Setup Azure backup', required: false, default: 'true' }
  checks_only: { description: 'Run checks only', required: false, default: 'false' }
  client_id: { description: 'Azure Client ID', required: true }
  tenant_id: { description: 'Azure Tenant ID', required: true }
  subscription_id: { description: 'Azure Subscription ID', required: true }
  tf_backend_sa_rg: { description: 'Terraform backend resource group', required: true }
  tf_backend_sa: { description: 'Terraform backend storage account', required: true }
  tf_backend_sa_container: { description: 'Terraform backend container', required: true }
  tf_backend_sa_region: { description: 'Terraform backend region', required: true }
  tf_backend_sa_region_short: { description: 'Terraform backend region short name', required: true }
  tf_backend_sa_sku: { description: 'Terraform backend SKU', required: true }
  tf_backend_env: { description: 'Terraform backend environment', required: true }
  mode: {description: 'Run mode (checks-only, backup-only, infra-only, or create)', required: false,default: 'create'}  

runs:
  using: "composite"
  steps:
    - name: Azure Login
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client_id }}
        tenant-id: ${{ inputs.tenant_id }}
        subscription-id: ${{ inputs.subscription_id }}

    - name: Create TFState Storage
      shell: bash
      env:
        TERRAFORM_BACKEND_RESOURCE_GROUP: ${{ inputs.tf_backend_sa_rg }}
        TERRAFORM_BACKEND_STORAGE_ACCOUNT: ${{ inputs.tf_backend_sa }}
        TERRAFORM_BACKEND_CONTAINER: ${{ inputs.tf_backend_sa_container }}
        TERRAFORM_BACKEND_LOCATION: ${{ inputs.tf_backend_sa_region }}
        TERRAFORM_BACKEND_LOCATION_SHORT: ${{ inputs.tf_backend_sa_region_short }}
        TERRAFORM_BACKEND_SKU: ${{ inputs.tf_backend_sa_sku }}
        TERRAFORM_BACKEND_ENV: ${{ inputs.tf_backend_env }}
        ARM_SUBSCRIPTION_ID: ${{ inputs.subscription_id }}
        SUBNET_IDS: ${{ inputs.subnet_ids }}
        RUN_RESOURCE_PROVIDER_CHECK: ${{ inputs.run_resource_provider_check }}
        RUN_RESOURCE_GROUP_CHECK: ${{ inputs.run_resource_group_check }}
        RUN_STORAGE_ACCOUNT_CHECK: ${{ inputs.run_storage_account_check }}
        RUN_NETWORK_RULES_CHECK: ${{ inputs.run_network_rules_check }}
        RUN_BLOB_PROPERTIES_CHECK: ${{ inputs.run_blob_properties_check }}
        RUN_CONTAINER_PROPERTIES_CHECK: ${{ inputs.run_container_properties_check }}
        RUN_BACKUP_CHECKS: ${{ inputs.run_backup_checks }}
        CREATE_RESOURCE_GROUP: ${{ inputs.create_resource_group }}
        CREATE_STORAGE_ACCOUNT: ${{ inputs.create_storage_account }}
        UPDATE_NETWORK_RULES: ${{ inputs.update_network_rules }}
        CREATE_CONTAINER: ${{ inputs.create_container }}
        UPDATE_BLOB_POLICIES: ${{ inputs.update_blob_policies }}
        UPDATE_CONTAINER_POLICIES: ${{ inputs.update_container_policies }}
        SETUP_AZURE_BACKUP: ${{ inputs.setup_azure_backup }}
        ARM_USE_OIDC: true
      run: |
        if [ "${{ inputs.mode }}" = "checks-only" ]; then
          bash ${{ github.action_path }}/scripts/create-tf-backend.sh --checks-only
        elif [ "${{ inputs.mode }}" = "backup-only" ]; then
          bash ${{ github.action_path }}/scripts/create-tf-backend.sh --backup-only
        elif [ "${{ inputs.mode }}" = "infra-only" ]; then
          bash ${{ github.action_path }}/scripts/create-tf-backend.sh --infra-only
        else
          bash ${{ github.action_path }}/scripts/create-tf-backend.sh
        fi

    - name: Azure Logout
      if: always()
      shell: bash
      run: |
        az logout
        az cache purge
        az account clear